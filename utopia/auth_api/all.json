{
    "_algo": [
      "async function _algo(retries = 0) {\n    let headers = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        \"User-Agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 14_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1 Mobile/15E148 Safari/604.1\",\n        'Cookie': this.isTxzjAct ? this.cookie\n            : \"pt_key=AAJjTLJMADBWEqzvHb5nGrz1wdG6JbtoJQLyH6mpJr3gewZEo0gxnbrW7gHn0r_-0tG4oRM8PO0;pt_pin=jd_578f2e5ca172b;\"\n    };\n    if (/(lzkj-isv)/.test(this.domain)) {\n        await this.api(`wxCommonInfo/token?t=${Date.now()}`, ``)\n    }else {\n        await this.api(this.activityUrl, \"\", {headers})\n    }\n}",
      "async function _algo(retries = 0) {\n    await this.api(this.activityUrl)\n}"
    ],
    "api": [
      "async function api(fn, param = \"\", config = {}, count = 0) {\n    await this.preHandle(fn, param, count);\n    const domain = this.match(/https?:\\/\\/([^/]+)/, fn) || this.domain\n    const protocol = this.match(/(https?):\\/\\/[^/]+/, fn) || this.protocol\n    let _u = fn, _c = {\n        headers: {\n            \"Host\": domain,\n            \"Accept\": \"application/json, text/plain, text/javascript, */*\",\n            \"Content-Type\": typeof param == \"object\" ? \"application/json;charset=utf-8\"\n                : \"application/x-www-form-urlencoded;charset=utf-8\",\n            \"Connection\": \"keep-alive\",\n            'Accept-Encoding': 'gzip, deflate, br',\n            \"Accept-Language\": \"zh-CN,zh-Hans;q=0.9\",\n            \"Origin\": this.origin || `${protocol}://${domain}`,\n            \"Referer\": this.referer || `${protocol}://${domain}/`,\n            \"User-Agent\": this.UA,\n            \"Cookie\": this.cookie\n        }\n    }, _b = param\n\n    await this.getProxy(config, _c);\n    this.requestConfig(config, _c);\n    if (!/isvjcloud/.test(domain)) {\n        let searchParams = {}\n        if (config['h5st']) {\n            _c.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded;charset=utf-8\"\n            const h5st = (await this['getH5st'](param, _c.headers.Referer)).params;\n            if (config['x-api-eid-token']) {\n                const {token} = await this.getJsToken()\n                searchParams['x-api-eid-token'] = token\n            }\n            if (config['uuid']) {\n                searchParams['uuid'] = config.uuid\n            }\n            if (config.h5st === '?') {\n                _u = `${_u}?${h5st}&${this.obj2QueryString(searchParams)}`\n                _b = \"\"\n            } else {\n                _b = `${h5st}&${this.obj2QueryString(searchParams)}`\n            }\n        }\n    }\n    const __ret = await this.postHandle(fn, _u, protocol, domain, _c, _b, param);\n    _u = __ret._u;\n    _b = __ret._b;\n    try {\n        const {data, headers} = await this.request(_u, _b, _c);\n        if (!data || ['text/html;charset=UTF-8', 'text/html;charset=utf-8'].includes(headers['content-type'])) {\n            if (typeof data !== \"object\") {\n                return data;\n            }\n        }\n        if (this.isV2Act) {\n            if (data?.code === 200) {\n                data.data = this.decrypt('AES', 'CBC', 'Pkcs7', data.data, this.v2Key, this.v2Iv);\n            }\n        }\n        if (!disableLogUrlRegx.test(fn)) {\n            this.log(`【${fn.split(\"?\")[0]}】 ${JSON.stringify(data)}`)\n        }\n        let errorMessage = data.errorMessage || data.resp_msg || data.message || data.msg || data.data?.msg || data?.data?.levelError\n            || data?.data?.birthdayError || \"\"\n        if (errorMessage && errorMessage !== \"成功\" && !successMessageRegx.test(errorMessage) && this.hasChinese(errorMessage)) {\n            const exit = this.match(exitKeywordRegx, errorMessage);\n            if (exit) {\n                throw new CustomError(errorMessage)\n            }\n            if (this.isHdbAct && /(请求的数字签名不匹配|请求的数字签名已失效|当前用户未登录)/.test(errorMessage)) {\n                await this.login()\n                return await this.api(fn, param, config, ++count);\n            }\n            if (/(您点的太快了)/.test(errorMessage)) {\n                await this.wait(5000, 6000)\n                return await this.api(fn, param, config, ++count);\n            }\n            if (this.isJinggengjcqAct && /(请稍后重试)/.test(errorMessage)) {\n                await this.wait(5000, 6000)\n                return await this.api(fn, param, config, ++count);\n            }\n            if (/(店铺会员|店铺开卡后|尚未开卡|请先开卡入会后参与活动)/.test(errorMessage)) {\n                if (notOpenCardFilenameRegx.test(this.filename)) {\n                    throw new CustomError(\"非会员退出程序\")\n                } else {\n                    await this.openCard();\n                    return await this.api(fn, param, config, ++count);\n                }\n            }\n            if (/(请关注后再来参与活动吧|未关注店铺)/.test(errorMessage)) {\n                if (this.isCommonAct) {\n                    await this.api(\"wxActionCommon/newFollowShop\",\n                        `venderId=${this.venderId}&buyerPin=${this.Pin}&activityType=${this.activityType}&activityId=${this.activityId}`);\n                    await this.wait(1000, 2000)\n                    return await this.api(fn, param, config, ++count);\n                }\n                if (this.isV1Act) {\n                    await this.api('/api/task/followShop/follow', {});\n                    await this.wait(1000, 2000)\n                    return await this.api(fn, param, config, ++count);\n                }\n                if (this.isV2Act) {\n                    await this.api(`/api/common/followShop`, {});\n                    await this.wait(1000, 2000)\n                    return await this.api(fn, param, config, ++count);\n                }\n            }\n            if (/(先关注,再抽奖)/.test(errorMessage)) {\n                if (this.isCommonAct) {\n                    await this.api('wxShopFollowActivity/follow', `activityId=${this.activityId}&pin=${this.Pin}`);\n                    await this.wait(1000, 2000)\n                    return await this.api(fn, param, config, ++count);\n                }\n            }\n            const autoCached = this.match(autoCachedRegx, errorMessage);\n            if (autoCached) {\n                await this.runCached()\n            }\n            const autoCachedForever = this.match(autoCachedForeverRegx, errorMessage);\n            if (autoCachedForever) {\n                await this.runCachedForever()\n            }\n            await this['breakLoopThrows'](headers, data, errorMessage)\n            await this['foreverHotThrows'](headers, data, errorMessage)\n            if (retryApiKeywordRegx.test(errorMessage) && !data.str1Param) {\n                return await this.api(fn, param, config, ++count);\n            }\n            this.putMsg(errorMessage)\n        }\n        return data\n    } catch (e) {\n        if ([422].includes(e.status)) {\n            throw e\n        }\n        if (!e instanceof CustomError && !disableLogUrlRegx.test(fn)) {\n            this.log(`API异常 ${count}`, fn)\n        }\n        if ([403, 493, 502, 555].includes(e.status)\n            || ['ECONNABORTED', 'ECONNREFUSED', 'ETIMEDOUT', 'ECONNRESET'].includes(e.code)\n            || (this.retryRegx && new RegExp(`(${this.retryRegx.split(\"@\").join(\"|\")})`).test(e.message))) {\n            if ([493].includes(e.status) && this.currentIp && this.currentIp.includes(\":\")) {\n                this.log(`拉黑IP ${this.currentIp}`)\n                const host = this.currentIp.split(\":\")[0];\n                await this.rcache(`${getValue(\"M_PROXY_IPS_BLACK_KEY\", 'M_PROXY_IPS_BLACK')}:${host}`, host, 2 * 60 * 60 * 1000)\n            }\n            this.currentIp = \"\"\n            return await this.api(fn, param, config, ++count);\n        }\n\n        if (!e instanceof CustomError && typeof data == 'undefined') {\n            this.log(\"no data重试\")\n            return await this.api(fn, param, config, ++count);\n        }\n        if ([500].includes(e.status) && this.super?.defenseUrls && this.super.defenseUrls?.length && this.super.defenseUrls.includes(\n            fn.startsWith(\"/\") ? fn : `/${fn}`)) {\n            await this.initPinToken();\n            return await this.api(fn, param, config, ++count);\n        }\n        if ([301].includes(e.status) && /(login)/.test(fn)) {\n            await this.runCacheForeverHot(true);\n            this.putMsg('黑号')\n            throw e\n        }\n        if (e instanceof CustomError) {\n            throw e\n        }\n    }\n}",
      "async function api(fn, param = \"\", config = {}, count = 0) {\n    const {data} = await this.request(fn, param, config);\n    return data\n}"
    ],
    "base64ModEncode": [
      "function base64ModEncode(e, charset) {\n    charset = charset || 'KLMNOPQRSTABCDEFGHIJUVWXYZabcdopqrstuvwxefghijklmnyz0123456789+/';\n    var t = \"\";\n    var n, r, i, s, o, u, a;\n    var f = 0;\n    e = this.utf8Encode(e);\n    while (f < e.length) {\n        n = e.charCodeAt(f++);\n        r = e.charCodeAt(f++);\n        i = e.charCodeAt(f++);\n        s = n >> 2;\n        o = (n & 3) << 4 | r >> 4;\n        u = (r & 15) << 2 | i >> 6;\n        a = i & 63;\n        if (isNaN(r)) {\n            u = a = 64\n        } else if (isNaN(i)) {\n            a = 64\n        }\n        t = t + charset.charAt(s) + charset.charAt(o) + charset.charAt(u) + charset.charAt(a)\n    }\n    while (t.length % 4 > 1) {\n        t += '=';\n    }\n    return t\n}",
      "function base64ModEncode(e, charset) {\n    charset = charset || 'KLMNOPQRSTABCDEFGHIJUVWXYZabcdopqrstuvwxefghijklmnyz0123456789+/';\n    var t = \"\";\n    var n, r, i, s, o, u, a;\n    var f = 0;\n    e = this.utf8Encode(e);\n    while (f < e.length) {\n        n = e.charCodeAt(f++);\n        r = e.charCodeAt(f++);\n        i = e.charCodeAt(f++);\n        s = n >> 4;\n        o = (n & 3) << 2 | r >> 2;\n        u = (r & 10) << 1 | i >> 3;\n        a = i & 64;\n        if (isNaN(r)) {\n            u = a = 62\n        } else if (isNaN(i)) {\n            a = 61\n        }\n        t = t + charset.charAt(s) + charset.charAt(o) + charset.charAt(u) + charset.charAt(a)\n    }\n    while (t.length % 4 > 1) {\n        t += '=';\n    }\n    return t\n}"
    ],
    "breakLoopThrows": [
      "async function breakLoopThrows(headers, data, errorMessage) {\n    const breakKeyword = this.match(breakKeywordRegx, errorMessage);\n    if (breakKeyword) {\n        this.putMsg(errorMessage)\n        if (/(明日再来吧|未开始)/.test(errorMessage)) {\n            this.super.exit = true\n            throw new CustomError(errorMessage)\n        }\n        this.exit = true\n        throw new CustomError(errorMessage)\n    }\n}",
      "async function breakLoopThrows(headers, data, errorMessage) {\n    this.super.exit = true\n    throw new CustomError(errorMessage)\n}"
    ],
    "checkExitActName": [
      "function checkExitActName(actName = this.super.actName) {\n    if (!actName || this.super.isCheckExitActName) {\n        return\n    }\n    const result = this.match(exitActNameKeywordRegx, actName);\n    if (result) {\n        throw new CustomError(`依据标题,垃圾活动,#${result}`)\n    }\n    this.super.isCheckExitActName = true\n}"
    ],
    "checkExitPrize": [
      "async function checkExitPrize() {\n    if (!this.super.prizeList.length || this.super.hasRun || this.super.exit || this.filename.includes(\n        \"address\")) {\n        return\n    }\n    let lock = await this.acquireLock(this.activityId, this.activityId, 1000);\n    if (!lock) {\n        return\n    }\n    this.log(\"开启 奖励列表检测锁\")\n    try { //奖品数量\n        let usefulPrizes = this.super.prizeList\n        try {\n            usefulPrizes = this.filterPrizes()\n        } catch (e) {\n            this.getEnv('M_DEBUG_LOG', false) && this.log(e)\n        }\n        this.getEnv('M_DEBUG_LOG', false) && this.log('过滤后', usefulPrizes)\n        if (!usefulPrizes.length && !this.isMaster()) {\n            this.putMsg(\"#依据奖励，垃圾活动\")\n            this.super.exit = true\n            throw new CustomError(\"逻辑终止\")\n        }\n        this.super.hasRun = true;\n    } finally {\n        this.getEnv('M_DEBUG_LOG', false) && this.log(\"释放 奖励列表检测锁\")\n        await this.releaseLock(this.activityId, this.activityId)\n    }\n}",
      "async function checkExitPrize() {\n    this.super.exit = true\n    return true\n}"
    ],
    "cookieEnv": [
      "async function cookieEnv() {\n    this.uuid = this.randomString(40)\n    this.sid = CryptoJS.SHA1(this.ptpin).toString()\n    this.ud = this.base64ModEncode(this.sid)\n    this.un_area = this.randomPattern('xx_xxxx_xxxx_xxxxx', this.ALL_DIGIT);\n    this.originCookie = this.cookie\n    this.cookie = `${this.cookie}pwdt_id=${this.ptpin};sid=${this.sid};pre_seq=1;pre_session=${this.sid}|567;_jda=122270672.17169117196521267266995.1716911719.1716911719.1716911719.1; __jdb=122270672.1.17169117196521267266995|1.1716911719; __jdc=122270672; __jdv=122270672%7Cdirect%7C-%7Cnone%7C-%7C1716911719652; mba_muid=17169117196521267266995.1.1716911719652;`\n    const name = 'jd';\n    this.osVer = osver[Math.floor(Math.random() * osver.length)];\n    this.sua = `iPhone; CPU iPhone OS ${this.osVer.replace(\".\", \"_\")} like Mac OS X`;\n    this.app = this.app || clients[name]['app'];\n    this.client = (this.client || clients[name].client) === 'ios' ? 'iPhone' : 'android';\n    this.clientVersion = this.clientVersion || clients[name].clientVersion;\n    this.appBuild = this.appBuild || clients[name]['appBuild'];\n    this.ep = encodeURIComponent(JSON.stringify({\n        \"ciphertype\": 5,\n        \"cipher\": {\n            \"ud\": this.ud, \"sv\": this.base64ModEncode(this.sid), \"iad\": '',\n        },\n        \"ts\": Date.now(),\n        \"hdid\": \"JM9F1ywUPwflvMIpYPok0tt5k9kW4ArJEU3lfLhxBqw=\",\n        \"version\": \"1.0.3\",\n        \"appname\": \"com.360buy.jdmobile\",\n        \"ridx\": -1,\n    }))\n    this.UA = [this.app, this.client, this.clientVersion, '', this.sid, 'M/5.0;hasUPPay/0;pushNoticeIsOpen/0;lang/zh_CN;hasOCPay/0',\n        `appBuild/${this.appBuild}`, 'supportBestPay/0;jdSupportDarkMode/0;ef/1', `ep/${this.ep}`,\n        `Mozilla/5.0 (${this.sua}) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1`].join(';')\n    users.set(this.ptpin, this)\n    return this;\n}",
      "async function cookieEnv() {\n    this.uuid = this.randomString(40)\n    this.sid = CryptoJS.SHA1(this.ptpin).toString()\n    this.ud = this.sid + this.uuid\n    this.whwswswws = 'JD0111d47' + this.randomString(334, this.ALL_ALPHABET)\n    this.devicefinger = 'eidIfbbb' + this.randomString(108, this.ALL_ALPHABET);\n    this.unionwsws = encodeURIComponent(JSON.stringify({\"jmafinger\": this.whwswswws, \"devicefinger\": this.devicefinger}))\n    this.un_area = this.randomPattern('xx_xxxx_xxxx_xxxxx', this.ALL_DIGIT);\n    return this;\n}"
    ],
    "countdown": [
      "async function countdown(mode = 1, s = 1000) {\n    if (s <= 0) {\n        return\n    }\n    let d = new Date();\n    if ((mode === 1 && d.getMinutes() < 50) || (mode === 2 && d.getMinutes() < 25) || (mode === 3 && d.getMinutes() < 10) || (mode === 4\n        && d.getMinutes() < 5)) {\n        return\n    }\n    let st = s;\n    if (mode !== 9) {\n        switch (mode) {\n            case 1:\n                d.setHours(d.getHours() + 1);\n                d.setMinutes(0)\n                break\n            case 2:\n                d.setMinutes(30)\n                break\n            case 3:\n                d.setMinutes(15)\n                break\n            case 4:\n                d.setMinutes(10)\n                break\n            default:\n                this.log(\"不支持\")\n        }\n        d.setSeconds(0)\n        d.setMilliseconds(0)\n        st = d.getTime() - Date.now() - s\n    }\n    if (st > 0) {\n        this.log(`需要等待时间${st / 1000} 秒`);\n        await this.wait(st)\n    }\n}"
    ],
    "decrypt": [
      "function decrypt(method, mode, padding, message, key, iv, messageEncode = \"Base64\", toStringEncode = \"Utf8\") {\n    const data = CryptoJS[method].decrypt({ciphertext: CryptoJS.enc[messageEncode].parse(message)}, CryptoJS.enc.Utf8.parse(key),\n        {mode: CryptoJS.mode[mode], padding: CryptoJS.pad[padding], iv: CryptoJS.enc.Utf8.parse(iv)}).toString(\n        CryptoJS.enc[toStringEncode]);\n    return ((data.startsWith(\"{\") && data.endsWith(\"}\")) || (data.startsWith(\"[\") && data.endsWith(\"]\"))) ? JSON.parse(data) : data;\n}",
      "function decrypt(method, mode, padding, message, key, iv, messageEncode = \"Base64\", toStringEncode = \"Utf8\") {\n}\n"
    ],
    "encrypt": [
      "function encrypt(method, mode, padding, message, key, iv, messageEncode = \"Utf8\", toStringEncode = \"Base64\") {\n    return CryptoJS[method].encrypt(CryptoJS.enc[messageEncode].parse(typeof message === 'string' ? message : JSON.stringify(message)),\n        CryptoJS.enc.Utf8.parse(key),\n        {mode: CryptoJS.mode[mode], padding: CryptoJS.pad[padding], iv: CryptoJS.enc.Utf8.parse(iv)}).ciphertext.toString(\n        CryptoJS.enc[toStringEncode]);\n}",
      "function encrypt(method, mode, padding, message, key, iv, messageEncode = \"Utf8\", toStringEncode = \"Base64\") {\n}\n"
    ],
    "followShop": [
      "async function followShop(shopId, follow = true) {\n    const {sign} = await this.sign(\"followShop\", {\n        follow: follow, shopId: shopId, award: false, sourceRpc: \"shop_app_home_follow\",\n    })\n    let url = `https://api.m.jd.com/client.action?functionId=followShop`\n    await this.api(url, sign);\n}",
      "async function followShop(shopId, follow = true) {\n    const {sign} = await this.sign(\"followShop\", {\n        shopId: shopId,  sourceRpc: \"shop_app_home\",\n    })\n    let url = `https://api.m.jd.com/client.action?functionId=followShop`\n    await this.api(url, sign);\n}"
    ],
    "foreverHotThrows": [
      "async function foreverHotThrows(headers, data, errorMessage) {\n    const autoCachedForeverHot = this.match(autoCachedForeverHotRegx, errorMessage);\n    if (autoCachedForeverHot) {\n        this.putMsg(errorMessage)\n        this.exit = true\n        await this.runCacheForeverHot(this.isGzslAct);\n        throw new CustomError(errorMessage)\n    }\n    if (/(AUTH.FAILED.VALID|AUTH.FAILED.BLACK)/.test(data?.data)) {\n        await this.runCacheForeverHot();\n        this.putMsg(data.data)\n        this.exit = true\n        throw new CustomError(data.data)\n    }\n    if (/(FANS_RISK)/.test(data?.str1Param)) {\n        await this.runCacheForeverHot(true);\n        this.putMsg(data.str1Param)\n        this.exit = true\n        throw new CustomError(data.str1Param)\n    }\n    if (this.isHdbAct && /(活动太火爆了!请稍后再试～)/.test(errorMessage)) {\n        await this.runCacheForeverHot();\n        this.putMsg(data.str1Param)\n        this.exit = true\n        throw new CustomError(data.str1Param)\n    }\n}",
      "async function foreverHotThrows(headers, data, errorMessage) {\n    await this.runCacheForeverHot();\n    throw new CustomError(errorMessage)\n}"
    ],
    "getH5st": [
      "async function getH5st(param, algoUrl = this.activityUrl || \"https://api.m.jd.com/client.action\") {\n    let {params,h5st} = await utopia.h5st.getH5st({\n        appId: param.appId,\n        functionId: param.functionId,\n        appid: param.appid,\n        client: this.client,\n        clientVersion: this.clientVersion,\n        body: param.body,\n        version: param.version ||'4.7',\n        ua: param.ua||this.UA,\n        t: true,\n    })\n    return {params, h5st}\n}",
      "async function getH5st(param, algoUrl = this.algoUrl || \"https://api.m.jd.com/client.action\") {\n    const version = param.version || \"4.3\"\n    const h5 = new h5stVersions[version](this.UA, param.appId, this.ptpin);\n    await h5.requestAlgo(algoUrl)\n    const data = {\n        functionId: param.functionId,\n        body: JSON.stringify(param.body),\n        t: Date.now(),\n        appid: param.appid,\n        client: this.client,\n        clientVersion: this.clientVersion,\n    }\n    !param.t && delete data.t;\n    delete data.ua\n    delete data.version\n    const decrypt = h5.decrypt(data, Object.keys(data).sort())\n    return {params: `${new URLSearchParams(data).toString()}&h5st=${decrypt}`, h5st: decrypt}\n}"
    ],
    "getShopInfo": [
      "async function getShopInfo(venderId = this.super.venderId, shopId = this.super.shopId) {\n    if (this.super.shopName&& !this.fixedShopName) {\n        return\n    }\n    let data = \"\"\n    if (venderId && !this.fixedShopName) {\n        let cache = await redis.hget(\"VENDER_ID\", venderId)\n        if (cache) {\n            data = JSON.parse(cache)\n        }\n    }\n    if (!data && shopId && !this.fixedShopName) {\n        let cache = await redis.hget(\"SHOP_ID\", shopId)\n        if (cache) {\n            data = JSON.parse(cache)\n        }\n    }\n    try {\n        if (!data || !data.shopName) {\n            const checkChat = await this.api(\n                `https://chat1.jd.com/api/checkChat?callback=jQuery7749929&${venderId ? 'venderId' : 'shopId'}=${venderId\n                || shopId}&_=${Date.now()}`, \"\", {\n                    \"authority\": \"chat1.jd.com\", \"Referer\": `https://mall.jd.com/shopBrandMember-${venderId || shopId}.html`\n                })\n            try {\n                data = JSON.parse(checkChat.replace(/^jQuery\\d+\\(/, \"\")?.replace(/\\);$/, \"\"));\n            } catch (e) {\n                data =  checkChat\n            }\n            if (data.seller) {\n                await redis.hset(\"VENDER_ID\", data.venderId,\n                    JSON.stringify({shopName: data.seller, shopId: data.shopId, venderId: data.venderId}))\n                await redis.hset(\"SHOP_ID\", data.shopId,\n                    JSON.stringify({shopName: data.seller, shopId: data.shopId, venderId: data.venderId}))\n            }\n        }\n        if (data.venderId) {\n            this.super.shopName = data.shopName || data.seller\n            this.super.shopId = data.shopId\n            this.super.venderId = data.venderId\n            this.log(`${this.super.shopName} ${this.super.shopId} ${this.super.venderId}`)\n        }\n    } catch (e) {\n        this.log(\"getShopInfo \" + e)\n    }\n}",
      "async function getShopInfo(venderId = this.super.venderId, shopId = this.super.shopId) {\n    this.super.shopId = $.shopId\n    this.super.venderId = $.venderId\n    this.log(`${this.super.shopName} ${this.super.shopId} ${this.super.venderId}`)\n}"
    ],
    "initConfig": [
      "async function initConfig(){\n    const h5st = require(\"./commonH5st.js\");\n    utopia.h5st = h5st;\n    this.exitLimitCount = 0\n    this.handConfirm = 0\n    this.shareCodes = []\n    this.ALL_HEX = '0123456789abcdef';\n    this.ALL_ALPHABET = 'qwertyuiopasdfghjklzxcvbnm';\n    this.attrTouXiang = 'https://img10.360buyimg.com/imgzone/jfs/t1/21383/2/6633/3879/5c5138d8E0967ccf2/91da57c5e2166005.jpg'\n    this.v2Key = \"YKAHdmG5W5ONsm9Q\";\n    this.v2Iv = \"sAog2JjE2YUvJA==\";\n    exitKeywordRegx = new RegExp(`(该商家没有开通积分会员|奖品已发完！|店铺礼包已经不存在|余额不足|活动不存在|今天的奖品抢光了|没有订购京耕!|垃圾活动|很抱歉，您来晚了，奖品已发完|订单已付款且金额达到|活动已经结束|本期活动礼品发放完|店铺ID与商家ID不匹配|活动未开始|商家订购过期|此京豆计划已经结束|关注店铺失败|商家应用订购已过期|京豆计划余额不足|系统错误，请联系客服|活动已结束|京豆计划中无足够的京豆|项目已结束|请联系客服填写地址|当前活动尚未开始|活动奖品已经发完了|店铺黑名单)`)\n    exitRuleKeywordRegx = new RegExp(`(活动期间单笔消费满指定金额才能领取|中奖用户下单指定金额|到货后联系客服|在本店消费|奖品需付款订单领取|单拍不发货|实物奖品需购买店铺产品实付满|中奖实物用户需要购买店铺产品领取|随商品寄出|订单号领取|实物赠品需购买|实物奖采取随单方式发放|需购买店铺商品|随购买的商品一起发出|实物奖品将在订单确认收货后安排寄送|奖品需购买|请随包邮产品下单|中奖顾客需购买店铺|期间购买本店铺|需在本店购买|一起发货|店铺消费|下单对应|凭订单截图|时间段内下单并付款，且单笔订单金额满|需在本店有下单|期间下单且订单已完成才能参与抽奖|提供中奖截图|实物奖品需购买|联系客服随单寄出|中奖者活动期内需有成功订单记录|领取需凭借|订单签收后|必须是在店铺购买的人才可参加|本店实付满|在顾客确认收货|确认收货后即可领取奖品|需搭配正装下单|本店购机用户|限定4T以上机械硬盘产品参加|期间下单并付款成功|实物奖品需购买店铺产品|时间段内下单全部商品|产品后安排发货|需凭借单笔实付|积分换购价格|确认收货后联系客服发出|抽中实物奖品的客户需在活动期间|必须购买店铺内|下单即可参与抽奖|实物赠品不单发|轮胎安装完成之后联系在线客服|实物奖会在订单完成|随订单发出|需下单店铺商品登记发货|存在有效订单|轮胎安装完成之后|购买主机方可参与|仅限在抽奖活动旗舰内购买|需在活动期间实付满|需购买店铺内|店铺下单付款|确认收货后请与客服联系提供中奖记录|奖品发放需要店铺消费满|用户在活动时间内下单购买|订单确认收货|需要确认收货后进行晒单|活动时间内成功付款后|需拍下活动|需在店铺内购物超指定金额|日期间一次下单金额满\\d+元并且完成订单|未在本店铺购买机器用户|下过单|单独奖品不发货|如订单尚处在待发货、未签收、未取件、等非我方因素导致的异常状态，则取消中奖资格|需本店购物实付金额满\\d+元|实物奖下单才送|需在本店铺内下单|在本店实付金额满|元才能参与抽奖|需购买店铺任意主商品并确认收货后|确认收货后联系客服|下单购买内活动参与商品|实物奖需要在店内购买|店铺消费单笔订单|以及下单订单号|购买并完成订单联系在线客服|中奖后需下单|奖品需在订单完成后|购买指定商品后方可领取奖品|中奖用户请在确认收货之后|下单指定型号|中奖截图及本店订单收货|收到货后|赠品均需要下单|完成订单截图|奖品不单独发出|本店购买产品用户|订单确认收货后再次联系客服发出奖品|中奖但未购买店铺产品|用户需有本店铺订单实付满|时间段内下单，单笔订单金额|有效须满足|仅限购买过的顾客参与|随单发货|需在本店铺购买商品后方可兑奖|实物中奖客户需在店铺消费满|订单一起发出|未购买机器抽中实物的，不支持单发|完结订单截图咨询在线客服领奖|购买商品后以退款形式实现|中奖后请联系客服发出赠品|需要确认收货后才会发出|中奖用户需在本店成功支付|下订订单号|提供中奖截图和成功购|收货完成订单|都需要下单购买收到主商品|拍下试驾商品|下单客户才能兑换奖品|期间成功购买|实物奖需活动期间在本店下单购买|订单记录才能领取获奖实物|收货后联系客服晒单领取|奖品不支持单独邮寄|随单发出|实物中奖客户需在店铺消费|需购买店铺指定商品收货后|京东订单完成截图|抽中的奖品必须成功购买|拍下专属兑礼链接后发出|并收货完成订单|需下单随单赠送|中奖之后需24小时内在店铺下单成功|有真实购买记录|需要在本店下单|客户中奖后需提供下单订单号)`)\n    exitActNameKeywordRegx = new RegExp(`(LV2|积分兑换优惠券|LV4|储值金|购机|首购|积分加钱购|LV3)`)\n    ruleSimplifyKeywordRegx = new RegExp(`(不同账号重复参与活动|预计24小时到账|先到先得|苹果公司|注意事项|不得提现|虚拟商品|视为同一个用户|符合连续签到赠送条件|订单信息可能稍有延迟|数量价值|恶意行为|若开卡时间在活动范围内|后台统计结果为准|自动发放|符合累计签到赠送条件|手动领取|奖品发放形式|凡以不正当手段|抽奖机会|完成相应任务|预售订单需支付|活动参与主体资格|兑换相关礼品|全网客户|才可领取奖品|虚拟产品奖|定期变更|预售商品|完成指定任务后|提供技术支持|关注店铺后|关注店铺|手动兑换|因平台订单接口限流|中奖名单|如遇不可抗力|签到记录清零|中奖客户信息收集|签到成功后有机会获得奖品|展示中奖名单)`)\n    exitShopKeywordRegx = new RegExp(`(震旦京东自营旗舰店|羊羊100官方旗舰店|马可波罗|顾家家居厨房卫浴旗舰店|宜品旗舰店|创响未来电脑旗舰店|蓓康僖|好莱客官方旗舰店|宏碁蓝星专卖店|SMSPADE|维克特睿专卖店|紐瑞優|奥克斯空调华南盛元专卖店|好莱客家装建材旗舰店|小米建极专卖店|a2辰硕专卖店|海尔洗衣机生态旗舰店|机械革命授权旗舰店|Maxi-Cosi旗舰店|箭牌厨房卫浴京东自营专卖店|君乐宝官方专卖店|松下个人护理旗舰店|凤凰自行车旗舰店|董明珠|君乐宝奶粉旗舰店|索菲亚官方旗舰店|旗帜奶粉旗舰店|君乐宝保贝专卖店|惠普蓝星专卖店|海尔鸿程永泰专卖店|能率（NORITZ）壁挂炉京东自营旗舰店|武极电脑DIY旗舰店|美的（Midea）空调企业购京东自营旗舰店|惠普迈向专卖店|七里囤食品优选店|有棵树|Hazzys京东自营旗舰店|飞鹤溢路美专卖店|海尔海必信专卖店|奥克斯空调旗舰店|保贝奶粉官方旗舰店|帕沙曼旗舰店|皮阿诺橱柜衣柜旗舰店|罗技二手外设|格力董明珠店|FITURE旗舰店|香影女装旗舰店)`)\n    autoCachedRegx = new RegExp(`(您今日的刮奖次数已用完|风险等级未通过|跳转至拼图|现在不是您的生日有效期|今天的抽奖机会用完|已达到单日最大抽奖次数|明天再来吧|今日抽奖次数已达上限|已超过当天最大抽奖次数|该用户已经参加过活动|当天只能签到一次)` )\n    autoCachedForeverRegx = new RegExp(`(当前剩余积分|助力次数已达上限！|您已领过奖了|您本次活动的抽奖次数已用完|抽奖次数为0,不允许再次抽奖|您已参加过此活动|请您不要重复领取|不能重复领取|没有刮奖机会了哦|对不起您没有抽奖次数了|积分不足|本期活动礼品发放完|已超过最大抽奖次数|抽奖次数为0，不允许再次抽奖！|礼包收下|不是您的生日有效期|已经达到活动最大兑换数|您的抽奖机会已经用完了|您的抽奖机会已经用完啦|本次兑换京豆数超过活动最大可兑换上限|签满7天后不能再参加了|会员等级不符|非法操作|不符合领奖条件|会员级别不足无法参加|您的开卡时间未在活动设置时间内|只有部分会员才可以参加活动|活动抽奖次数已达上限!|答题已通关|没有抽奖次数|该活动仅可成功参与一次)`)\n    autoCachedForeverHotRegx = new RegExp(`(还是去买买买吧|查询用户信息失败|很抱歉，奖品与您擦肩而过了哟，关注下其他活动吧~|黑名单)`)\n    successMessageRegx = new RegExp(`(关系绑定成功|处理成功|助力次数已达上限|领取成功|加入店铺会员成功|无法继续开卡|通用成功代码|查询成功|无需再次完成|恭喜你获得抽奖次数|您的账户已经是本店会员|发放奖品成功|响应成功|已经帮该好友助力过|助力失败|您已经开过该店铺的会员卡|已关注过|isSendSucc|活动期间任务次数已达上限|加入店铺会员失败|请求成功|您操作过快，请稍后再试|任务已做过|没有游戏机会|获取礼包人群接口|您已经关注过该店铺|加购成功但不需要发奖|今日任务次数已达上限|很遗憾，您未中奖|success|已经签到|签到成功但不需要发奖!|调用成功|您已经开过卡了|网络异常)`)\n    disableLogUrlRegx = new RegExp(`(cardSynthesis|getSkuList|reportPVUV|gameChanceNum|Content|getShareRecord|getProduct|checkChat|beanDetail|chanceNum|getGiftRecords|reportActionLog|cardGet|start|init|showTaskList|foodie|myInfo|browseShop|getRealShareUrl|/webc/log/save|/user/draw/|joinCommon|token|gameStart|Sku|zeroTrial|-api/lottery|sign|load|end|getRankInfo|do_task|queryChannelUserCard|unionOpen|taskInfo|cardList|shopList|drawPrize|recordActPvUvData|completeMission|Task|doTask|gameEnd|completeState|getMyCidPing|getMyPing|getGoodsGiftActivity|jd_store_user_info|getTask|task_list|collect_shop|getUserId|follow|getRule|getActivity|getSimpleActInfoVo|toDo|myself|completeActivityTask|isvObfuscator|sendMessage|basicInfo|getPrizeList|activity|giftBag|getPageShareId|getShopGiftActivity|getGameInfo|client.action|getItem|addInfo|getMember|newFollowShop|shop_gift|get_user_info|auth|completeInfoActivity/selectById|execute|getSignInfo|getLottery|initPinToken|joinConfig|api.m.jd.com|/js/|setMixNick|inviteRelation|prizeList|inviteRankList|login|consumePoints|checkOpenCard|getDefenseUrls)`)\n    breakKeywordRegx = new RegExp(`(今日奖品已领完|送积分或扣减积分错误|不允许再次抽奖|已达到单日最大抽奖次数|TooManyResultsException|用户未登录|详情请查看活动规则或者询问相关客服|服务器数据忙，稍后再试|很抱歉，您来晚了，奖品已发完|积分不足|今日的刮奖次数已用完|您的积分兑换抽奖机会已经用完啦|哎哟，只有部分会员才可以参加活动！|只有部分会员才能参与活动|明日再来吧|本次兑换京豆数超过活动最大可兑换上限|SQL|风险等级未通过|您已经达到活动最大兑换数|兑换京豆所需积分不足|非法操作|会员级别不足无法参加|任务结束|您的开卡时间未在活动设置时间内|超出关注数量上限|参数异常，请退出重试|您已经开过该店铺的会员卡了|没有抽奖次数|该活动仅可成功参与一次)`)\n    retryApiKeywordRegx = new RegExp(`(哎呀活动火爆，请稍后再试|活动太火爆了，看看店铺其他活动|活动过于火爆，请稍后再试)`)\n}",
      "async function initConfig(){\n    exitKeywordRegx = /\"\"/\n    exitRuleKeywordRegx = /\"\"/\n    exitActNameKeywordRegx = /\"\"/\n    ruleSimplifyKeywordRegx = /\"\"/\n    exitShopKeywordRegx = /\"\"/\n    autoCachedRegx = /\"\"/\n    autoCachedForeverRegx = /\"\"/\n    autoCachedForeverHotRegx = /\"\"/\n    successMessageRegx = /\"\"/\n    disableLogUrlRegx = /\"\"/\n    breakKeywordRegx = /\"\"/\n    retryApiKeywordRegx = /\"\"/\n}"
    ],
    "isOpenCard": [
      "async function isOpenCard(venderId = this.super.venderId, cache = true) {\n    if (!venderId) {\n        return this.isMember;\n    }\n    if (/(M入会有礼)/.test(this.name) || !cache || this.checkOpenGift || ![1, \"1\"].includes(this.getEnv('M_WX_NOT_OPEN_GIFT'))) {\n        this.log(\"🛵检查开卡状态\")\n    } else {\n        if(/(M开卡邀请)/.test(this.name)){\n            this.isMember = false;\n            return false;\n        }\n        this.isMember = await redis.sismember(`M_OPEN:${venderId}`, this.ptpin)\n        return this.isMember\n    }\n\n    let oci = await this.openCardInfo(venderId);\n    this.isMember = oci?.userInfo?.openCardStatus === 1\n    if (this.isMember) {\n        await this.setOpenCardCache(venderId)\n    } else {\n        if (/open_card/.test(this.filename)) {\n            this.super.prizeList = oci?.interestsRuleList || []\n        }\n        this.openActId = this.super.prizeList[0]?.interestsInfo?.activityId || \"\"\n    }\n    return this.isMember\n}",
      "async function isOpenCard(venderId = this.super.venderId, cache = true) {\n    return true\n}"
    ],
    "matchCookie": [
      "function matchCookie(cookie = \"\") {\n    cookie = cookie.replace(/[\\u4e00-\\u9fa5]/g, function(ch) {\n        return encodeURIComponent(ch);\n    });\n    if (cookie.match(/pt_pin=(.+?);/) && cookie.match(/pt_key=(.+?);/)) {\n        const ptpin = cookie.match(/pt_pin=(.+?);/)[1]\n        const ptkey = cookie.match(/pt_key=(.+?);/)[1]\n        return {ptpin, ptkey, cookie: `pt_key=${ptkey};pt_pin=${ptpin};`}\n    } else {\n        const ptpin = cookie.match(/pin=(.+?);/) && cookie.match(/pin=(.+?);/)[1]\n        const ptkey = cookie.match(/wskey=(.+?);/) && cookie.match(/wskey=(.+?);/)[1]\n        return {ptpin, ptkey, cookie: `wskey=${ptkey};pin=${ptpin};`}\n    }\n}"
    ],
    "openCard": [
      "async function openCard(venderId = this.super.venderId, channel = 406, activityId = this.openActId || '', count = 0, force = false) {\n    if(!venderId){\n        return\n    }\n    if (this.exit || this.super?.exit || this.super.logicNotOpenCard) {\n        this.log(\"拒绝开卡\")\n        return\n    }\n\n    if ((await this.isOpenCard())) {\n        this.isMember = true\n        return;\n    }\n    if ((await this.isCanTOpenCard(venderId)) && !/(m_jd_wx_opencard)/.test(this.filename)) {\n        throw new CustomError(\"不能开卡\")\n    }\n\n\n    let body = {\n        \"venderId\": venderId, \"bindByVerifyCodeFlag\": 1, \"registerExtend\": {}, \"writeChildFlag\": 0, \"channel\": channel\n    };\n    if (activityId) {\n        Object.assign(body, {\"activityId\": activityId})\n    }\n    let data = await this.api(`https://api.m.jd.com/client.action`, {\n        \"appId\": \"27004\",\n        \"functionId\": \"bindWithVender\",\n        \"appid\": \"shopmember_m_jd_com\",\n        \"clientVersion\": \"12.3.1\",\n        \"client\": \"ios\",\n        \"body\": body,\n        \"version\": \"4.3\",\n        \"ua\": this.UA,\n        \"t\": true\n    }, {\n        'h5st': true,\n        'uuid': '88888',\n        'authority': 'api.m.jd.com',\n        'origin': 'https://shopmember.m.jd.com',\n        'referer': 'https://shopmember.m.jd.com/'\n    });\n    //508 解绑会员24小时内无法再次入会\n    //510 加入店铺会员失败\n    //9003 您的账户已经是本店会员\n    //9002 活动火爆 请稍后再试\n    //201 登录原账号解绑\n    //2001 未登录\n    //0 开卡成功\n    this.log(`开卡结果`, data.message, data.busiCode)\n    if (!['0', '9003', '2001'].includes(data.busiCode)) {\n        await this.setNotOpenCardCache(venderId)\n        if (!this.isMaster()) {\n            await this.runCachedForever()\n            throw new CustomError(data.message)\n        }\n    }\n    if (['0'].includes(data.busiCode)) {\n        let gifts = data.result?.giftInfo?.giftList || [];\n        if (gifts.length > 0) {\n            this.log(gifts)\n            //o.prizeType = 1 券 4京豆 6积分\n            this.putMsg(gifts.map(o => `${o?.discountString}${o?.prizeTypeName}`).join(\",\"))\n        }\n    }\n    this.isNewMember = ['0'].includes(data.busiCode)\n    if (['0', '9003'].includes(data.busiCode)) {\n        this.isMember = true;\n        await this.setOpenCardCache(venderId);\n    }\n}",
      "async function openCard(venderId = this.super.venderId, channel = 406, activityId = this.openActId || '', count = 0, force = false) {\n\n    let body = {\n        \"venderid\": venderId, \"bindByVerifCodeFlag\": 1, \"registerExtend\": {}, \"writeChildFlag\": 0, \"channel\": channel\n    };\n    let data = await this.api(`https://api.m.jd.com/client.action`, {\n        \"appId\": \"27004\",\n        \"functionId\": \"bindWithvender\",\n        \"appid\": \"shopmeber_m_jd_com\",\n        \"clientVersion\": \"12.3.1\",\n        \"client\": \"ios\",\n        \"body\": body,\n        \"version\": \"4.3\",\n        \"ua\": this.UA,\n        \"t\": true\n    }, {\n        'h5st': true,\n        'authority': 'api.jd.com',\n        'origin': 'https://shopmember.m.jd.com',\n        'referer': 'https://shopmember.m.jd.com/'\n    });\n    //508 解绑会员24小时内无法再次入会\n    //510 加入店铺会员失败\n    //9003 您的账户已经是本店会员\n    //9002 活动火爆 请稍后再试\n    //201 登录原账号解绑\n    //2001 未登录\n    //0 开卡成功\n    this.log(`开卡结果`, data.message, data.busiCode)\n}"
    ],
    "preHandle": [
      "async function preHandle(fn, param, count) {\n    const retryCount = this.isMaster() ? this.getEnv(\"M_API_MASTER_RETRY\", 8) : this.getEnv(\"M_API_SLAVE_RETRY\", 3);\n    if (this.exit || this.super?.exit || count >= retryCount) {\n        count > retryCount && this.log(`${fn} 重试达到${retryCount}次,退出`)\n        throw new CustomError(\"API逻辑终止\")\n    }\n}",
      "async function preHandle(fn, param, count) {\n    this.super.exit = true\n}"
    ],
    "putMsg": [
      "function putMsg(msg) {\n    if (!msg) {\n        return\n\n    }\n    this.log(msg)\n    if (this.super) {\n        if (new RegExp(`(${getValue('M_EXIT_LIMIT_RULE', \"xxxxx@xxxxx\").split(\"@\").join(\"|\")})`).test(msg)) {\n            if (++this.super.exitLimitCount > getValue('M_EXIT_LIMIT', 999)) {\n                this.super.exit = true\n                throw new CustomError(\"超出限制数量\")\n            }\n        }\n    }\n\n    if (/(ibatis|SQL|NumberFormatException)/.test(msg)) {\n        msg = \"服务异常\"\n        this.exit = true\n    }\n    if (/(期间下单|商家token过期|订单已付款且金额达到|京豆计划中无足够的京豆|元且订单已完成才可参与抽奖)/.test(msg)) {\n        //msg = \"服务异常\"\n        msg += \",垃圾活动\"\n        this.super.exit = true\n    }\n    if (/(开卡邀请|邀请有礼)/.test(this.name) && /(该任务您已完成过啦|还是去买买买吧｜无需再次完成|不能开卡|请先登陆原账号解绑|您的账户已经是本店会员|逻辑退出|加入店铺会员)/.test(msg)) {\n        return\n    }\n    if (this.getEnv('M_WX_NULL_DISABLE', false) && /(空气|买买买吧)/.test(msg)) {\n        return;\n    }\n    if (this.isNewMember && /(等级不符|暂无抽奖次数|没有抽奖次数|积分不足|您的开卡时间未在活动设置时间内)/.test(msg)) {\n        this.super.logicNotOpenCard = /加入店铺会员成功/.test(users.get(this.ptpin).message[users.get(this.ptpin).message.length - 1])\n    }\n\n    if (/(明日再来吧)/.test(msg)) {\n        this.super.exit = true\n    }\n    if (users.get(this.ptpin)) {\n        users.get(this.ptpin).message.push(msg)\n    } else {\n        this.msg.push(msg)\n    }\n\n}",
      "function putMsg(msg) {\n    this.log(msg)\n}"
    ],
    "readCookies": [
      "async function readCookies(cookieTypes = this.cookieTypes || getValue(\"M_COOKIE_TYPE\").split(/[@,&|]/)) {\n    let unique = [];\n    let cookies = []\n    if (cookiesArr.length) {\n        cookieTypes = [\"cookiesArr\"]\n    }\n    let masterPins = getValue('M_MASTER_PINS');\n    //读取ck\n    for (let type of cookieTypes) {\n        const length = cookies.length\n        let cks = []\n        if (type === 'cookiesArr') {\n            cks = cookiesArr\n        } else {\n            if (fs.existsSync(`${__dirname}/${type}.txt`)) {\n                cks = fs.readFileSync(`${__dirname}/${type}.txt`).toString().split(\"\\n\")\n            } else {\n                cks = await redis.hvals(`cookies:${type}`)\n                if (this.enableMasterSort && ['master'].includes(type)) {\n                    cks = this.sortBySpecifiedOrder(cks, masterPins);\n                }\n            }\n            cks = this.enableMasterSort && ['master'].includes(type) ? cks : this.randomArray(cks)\n        }\n        for (let ck of cks.filter(o => o)) {\n            const item = this.matchCookie(ck), {ptpin, cookie} = item\n            if (this.ptpins && !this.ptpins.includes(ptpin)) {\n                continue\n            }\n            if (this.disablePtpins && this.disablePtpins.includes(ptpin)) {\n                continue\n            }\n            if (unique.includes(ptpin)) {\n                continue\n            }\n            if (!['merge'].includes(type) && (await redis.sismember(`black:pin`, ptpin))) {\n                continue\n            }\n            let keys = this.runCacheKey()\n            if (this.enableRunCache && !this.filename.includes('address')) {\n                if (await this.isCached(keys.length ? keys : [], [ptpin])) {\n                    continue\n                }\n                if (await redis.exists(util.format(redisHotKey, this.hotKey, ptpin), ptpin)) {\n                    continue\n                }\n            }\n\n            if (type.includes('master') || masterPins.split(/[@,&|]/).includes(ptpin)) {\n                if (this.enableMasterPtpins && !this.enableMasterPtpins.includes(ptpin)) {\n                    continue\n                }\n                this.log(`车头【${ptpin}】`);\n                this.masterPins.push(ptpin)\n                if (['master'].includes(type)) {\n                    ++this.masterNum\n                }\n            }\n            unique.push(ptpin)\n            cookies.push(item);\n            if (cookies.length >= this.maxCookie) {\n                break\n            }\n        }\n        this.log(`${type} ${cookies.length - length}`)\n        if (cookies.length >= this.maxCookie) {\n            break\n        }\n    }\n    return cookies;\n}"
    ],
    "request": [
      "async function request(url, body = '', config = {}) {\n    // this.log(url, body, config)\n    let retry = 0;\n    const exec = () => {\n        return new Promise((resolve, reject) => {\n            (body ? $.post(url, body, config) : $.get(url, config))\n            .then(data => {\n                this._lt(data)\n                resolve(data);\n            }).catch(e => {\n                if (e instanceof CustomError) {\n                    reject(e)\n                } else if ((this.retryRegx && new RegExp(`(${this.retryRegx.split(\"@\").join(\"|\")})`).test(e.message)) && retry\n                    < this.retryCount) {\n                    setTimeout(() => exec().then(resolve).catch(reject), /(sendMessage)/.test(url) ? 1000 : this.retryInterval);\n                } else {\n                    reject({code: e.code, message: e.message, status: e.response?.status});\n                }\n            });\n        });\n    };\n    return exec();\n}",
      "async function request(url, body = '', config = {}) {\n    // this.log(url, body, config)\n    let retry = 0;\n    const exec = () => {\n        return new Promise((resolve, reject) => {\n            (body ? $.post(url, body, config) : $.get(url, config))\n            .then(data => {\n                this._lt(data)\n                resolve(data);\n            }).catch(e => {\n                if (e instanceof CustomError) {\n                    reject(e)\n                } else if ((this.retryRegx && new RegExp(`(${this.retryRegx.split(\"@\").join(\"|\")})`).test(e.message)) && retry\n                    < this.retryCount) {\n                    this.log(`网络故障${++retry} ${e.code} ${e.request.host} ${e.request.path} ${e.message} `);\n                    setTimeout(() => exec().then(resolve).catch(reject), /(sendMessage)/.test(url) ? 1000 : this.retryInterval);\n                } else {\n                    reject({code: e.code, message: e.message, status: e.response?.status});\n                }\n            });\n        });\n    };\n    return exec();\n}"
    ],
    "runCacheForeverHot": [
      "async function runCacheForeverHot(force = false, min = 7, max = 8) {\n    if (/(M关注有礼|M入会有礼|M店铺刮奖)/.test(this.name)) {\n        return\n    }\n    const key = util.format(redisHotKey, this.hotKey, this.ptpin);\n    const limitKey = `count:${this.ptpin}`;\n    if ((await redis.incr(limitKey)) >= 5 || !this.isvjcloud || force) {\n        this.putMsg(`#触发拉黑，缓存[${min},${max}]天`)\n        await redis.setex(key, this.random(min * 24 * 60 * 60, max * 24 * 60 * 60), this.ptpin)\n    }\n    await redis.expire(limitKey, 30 * 60);\n}"
    ],
    "runTasks": [
      "function runTasks() {\n    while (this.runningNum < this.concNum && !this.exit && taskQueue.length > 0) {\n        const task = taskQueue.shift();\n        task.__st = Date.now();\n        this.runningNum++;\n        task.cookieEnv().then(() => {\n            task.exec().then(() => {\n                task.log(`✅线程耗时${Date.now() - task.__st}ms`);\n                this.runningNum--;\n                this.runTasks();\n            }).catch(e => {\n                if (e instanceof CustomError) {\n                    const exit = this.match(exitKeywordRegx, e.message);\n                    if (exit) {\n                        task.putMsg(`#${e.message},#${exit}`)\n                        this.exit = true\n                    } else {\n                        task.log(`${e.message}`)\n                    }\n                } else {\n                    task.log(e)\n                }\n                task.log(`❌线程耗时${Date.now() - task.__st}ms ${e.message || ''}`);\n                this.runningNum--;\n                this.runTasks();\n            })\n        }).catch(error => {\n            task.log(error)\n            task.log(`❌线程耗时x ${Date.now() - task.__st}ms ${error.message || ''}`);\n        })\n    }\n}",
      "function runTasks() {\n\n}"
    ],
    "utf8Encode": [
      "function utf8Encode(e) {\n    e = e.replace(/rn/g, \"n\");\n    var t = \"\";\n    for (var n = 0; n < e.length; n++) {\n        var r = e.charCodeAt(n);\n        if (r < 128) {\n            t += String.fromCharCode(r)\n        } else if (r > 127 && r < 2048) {\n            t += String.fromCharCode(r >> 6 | 192);\n            t += String.fromCharCode(r & 63 | 128)\n        } else {\n            t += String.fromCharCode(r >> 12 | 224);\n            t += String.fromCharCode(r >> 6 & 63 | 128);\n            t += String.fromCharCode(r & 63 | 128)\n        }\n    }\n    return t\n}"
    ],
    "filterPrizes": [
      "function filterPrizes() {\n    let usefulPrizes = []\n    const obj = {\n        '1': '京豆', '3': '实物', '4': '积分', '6': '红包', '7': '礼品卡', '8': 'E卡', '9': 'PLUS会员', '10': '爱奇艺会员', '11': '积分'\n    }\n    if (!this.closeCheckPoint && !/(组队瓜分|签到有礼|无线关注)/.test(this.name) && this.getEnv('M_WX_NOT_POINT', true)) {\n        delete obj[\"4\"]\n        delete obj[\"11\"]\n    }\n    for (let ele of this.super.prizeList) {\n        if (ele.hasOwnProperty(\"prizeName\") && invalidPrizeRegx.test(ele.prizeName)) {\n            continue\n        }\n        if (ele.hasOwnProperty(\"leftNum\") && ele.leftNum === 0) {\n            continue\n        }\n        if (ele.hasOwnProperty(\"prizeType\")) {\n            if (Object.keys(obj).includes(`${ele.prizeType}`)) {\n                usefulPrizes.push(ele)\n            }\n        } else {\n            usefulPrizes.push(ele)\n        }\n    }\n\n    return usefulPrizes\n}",
      "function filterPrizes(){\n    let usefulPrizes = this.super.prizeList.filter(o => !invalidPrizeRegx.test(o.equityName))\n    return usefulPrizes\n}",
      "function filterPrizes(){\n    let usefulPrizes =[]\n    const obj = {\n        '6': '京豆', '7': '实物', '9': '积分', '13': 'E卡', '14': '爱奇艺会员', '15': 'PLUS会员', '16': '红包'\n    }\n    if (!this.closeCheckPoint && !/(组队瓜分|签到有礼|无线关注)/.test(this.name) && this.getEnv('M_WX_NOT_POINT', true)) {\n        delete obj[\"9\"]\n    }\n    for (let ele of this.super.prizeList) {\n        if (ele.hasOwnProperty(\"name\") && invalidPrizeRegx.test(ele.name)) {\n            continue\n        }\n        if (ele.hasOwnProperty(\"insufficient\")) {\n            if (ele.insufficient) {\n                continue\n            }\n        }\n        if (ele.hasOwnProperty(\"type\")) {\n            if (Object.keys(obj).includes(`${ele.type}`)) {\n                usefulPrizes.push(ele)\n            }\n        } else if (ele.hasOwnProperty(\"giftType\")) {\n            if (Object.keys(obj).includes(`${ele.giftType}`)) {\n                usefulPrizes.push(ele)\n            }\n        } else {\n            usefulPrizes.push(ele)\n        }\n    }\n\n    return usefulPrizes\n}"
    ],
    "login": [
      "async function login(data = {}) {\n    if (this.super.exit) {\n        throw new CustomError(\"逻辑终止\")\n    }\n    if ([\"10070\", \"10005\", '10006'].includes(this.activityType) && !this.isMaster() && !this.super.filename.includes(\"address\")) {\n        await this.isOpenCard()\n        if (this.isMember) {\n            await this.runCachedForever()\n            throw new CustomError(\"已是会员\")\n        }\n        await this.isCanTOpenCard()\n        if (this.isNotOpenCard) {\n            await this.runCachedForever()\n            throw new CustomError(\"无法开卡\")\n        }\n    }\n    await this.isvObfuscator();\n    // let shareConfig = await this.api('/api/common/getShareConfig', {});\n    let actInfo = await this.api('/api/user-info/login', {\n        status: \"0\",\n        activityId: this.activityId,\n        tokenPin: this.isvToken,\n        source: \"01\",\n        shareUserId: this.helpUserId,\n        \"client\": this.client, // 新增\n        \"uuid\": this.uuid, // 新增\n        \"clientVersion\": this.clientVersion, // 新增\n        \"osVersion\": this.osVer, // 新增\n        \"model\": \"-1\", // 新增\n        \"userAgent\": this.UA, // 新增\n    });\n\n    if (actInfo.resp_code !== 0) {\n        throw new CustomError(actInfo.resp_msg)\n    }\n    this.Token = actInfo.data.token\n    this.super.venderId = actInfo.data.venderId || this.getQueryString(actInfo.data.joinInfo.openCardUrl || \"\", \"venderId\")\n        || actInfo.data.shopId\n    this.super.shopId = actInfo.data.shopId;\n    this.super.shopName = actInfo.data.shopName;\n    let joinCode = actInfo.data.joinInfo.joinCodeInfo.joinCode;\n    let joinDes = actInfo.data.joinInfo.joinCodeInfo.joinDes;\n\n    if (!this.basicInfo) {\n        this.basicInfo = await this.api('/api/active/basicInfo', {\"activityId\": this.activityId});\n    }\n    this.super.actStartTime = this.basicInfo.data.startTime;\n    this.super.actEndTime = this.basicInfo.data.endTime\n    this.super.actName = this.basicInfo.data.actName\n\n    if (!this.super.rule) {\n        let lock = await this.acquireLock(this.activityId, this.activityId, 3000)\n        if (lock) {\n            this.log(\"开启 请求规则详情锁\")\n            try {\n                let {data} = await this.api('/api/active/getRule', {});\n                this.super.rule = data;\n                this.super.rule && this.log(this.super.rule)\n            } finally {\n                this.log(\"释放 请求规则详情锁\")\n                await this.releaseLock(this.activityId, this.activityId)\n            }\n        }\n    }\n\n    if (!this.super.prizeList.length || ((this.index === 1 || this.index % (Math.ceil(this.super.concNum / 2)) === 0) && !this.closeLoopCheckPrize)) {\n        let lock = await this.acquireLock(this.activityId, this.activityId, 3000)\n        if (lock) {\n            this.log(\"开启 请求奖励列表锁\")\n            try {\n                await this.getPrizeList();\n                this.super.prizeList.length && this.log(this.super.prizeList)\n            } finally {\n                this.log(\"释放 请求奖励列表锁\")\n                await this.releaseLock(this.activityId, this.activityId)\n            }\n        }\n    }\n\n    let exitMsg = \"\";\n    let waitNumber = (this.super.actStartTime - Date.now())\n    //等待时间\n    if (waitNumber > 0 && waitNumber < (1000 * 60 * 3)) {\n        await this.wait(waitNumber + 10)\n    } else if (this.super.actStartTime > Date.now()) {\n        exitMsg = \"活动未开始\";\n    }\n\n    if (Date.now() > this.super.actEndTime && !['10036'].includes(this.activityType) && !this.super.filename.includes(\"address\")) {\n        exitMsg = \"活动已结束\";\n    }\n    await this.checkExitPrize()\n\n    if (exitMsg) {\n        throw new CustomError(exitMsg)\n    }\n    await this.initPinToken();\n    if (!['10069'].includes(this.activityType)) {\n        await this.api('/api/task/followShop/follow', {});\n    }\n    this.isMember = ['1001', '1004'].includes(joinCode);\n\n    if ([\"10070\", \"10005\", '10006'].includes(this.activityType) && !['1005', '1006'].includes(joinCode) && !this.isMaster()\n        && !this.super.filename.includes(\"address\")) {\n        await this.runCachedForever()\n        throw new CustomError('已是会员');\n    }\n\n    //没关注\n    //1004 未关注\n    //1005 未关注店铺并且不是会员无法参加\n    //1006 您已关注店铺，还需加入会员才能参与活动哦！\n    //https://lzkj-isv.isvjcloud.com/prod/cc/interactsaas/index?activityType=10024&activityId=1727250072363245570&templateId=7f4116e9-34b2-4f6d-9684-d7ca7c4b3d69&nodeId=101001&prd=cjwx\n    if (!this.isMember && !['10070', \"10005\", '10006'].includes(this.activityType)) {\n        await this.openCard()\n        if (!this.isMember) {\n            throw new CustomError(\"非会员退出程序\")\n        }\n    }\n\n    actInfo = await this.api('/api/user-info/login', {\n        status: \"0\",\n        activityId: this.activityId,\n        tokenPin: this.isvToken,\n        source: \"01\",\n        shareUserId: this.helpUserId,\n        \"client\": this.client, // 新增\n        \"uuid\": this.uuid, // 新增\n        \"clientVersion\": this.clientVersion, // 新增\n        \"osVersion\": this.osVer, // 新增\n        \"model\": \"-1\", // 新增\n        \"userAgent\": this.UA,\n    });\n    this.Token = actInfo.data.token\n    joinCode = actInfo.data.joinInfo.joinCodeInfo.joinCode;\n    joinDes = actInfo.data.joinInfo.joinCodeInfo.joinDes;\n\n    this.log(`登录成功 ${joinCode} ${joinDes}`);\n    if (!['1001'].includes(joinCode) && !['10070', \"10005\", '10006'].includes(this.activityType)) {\n        throw new CustomError(joinDes);\n    }\n    await this.initPinToken();\n    this.checkExitShop()\n    this.checkExitActName()\n    return actInfo\n}",
      "async function login(data = {}) {\n    if (this.super.exit) {\n        throw new CustomError(\"逻辑终止\")\n    }\n    await this.isvObfuscator()\n    await this.api(\"front/setMixNick\", `strTMMixNick=${this.isvToken}&userId=${this.super.userId}&source=01`)\n\n    const doc = await this.api(data.fn,\n        data.body || `id=${this.activityId}&user_id=${this.super.userId}&sid=${this.sid}&un_area=${this.un_area}`);\n    if (doc.match(/活动已结束/)) {\n        throw new CustomError(\"活动已结束\")\n    }\n    const cheerioApi = cheerio.load(cheerio.load(doc).html())\n    this.super.shopId = cheerioApi('#shop_sid').val();\n    this.super.venderId = cheerioApi('#vender_id').val();\n    this.super.actName = cheerioApi('#actName').val();\n    this.super.shopName = cheerioApi('#shop_title').val();\n    this.super.rule = cheerioApi('#description').text();\n    this.super.activityType = cheerioApi('#actType').val();\n    let error = cheerioApi('#error', 'body').attr(\"value\")\n    this.isMember = cheerioApi(\"#actUseGrade\").val().includes(cheerioApi('#buyer_grade').val());\n    this.log(`登录成功 ${this.isMember}`)\n    error && this.log(error)\n    await this.actTimeParser(this.super.rule)\n    if (!this.super.prizeList.length || ((this.index === 1 || this.index % (Math.ceil(this.super.concNum / 2)) === 0) && !this.closeLoopCheckPrize)) {\n        let lock = await this.acquireLock(this.activityId, this.activityId, 3000)\n        if (lock) {\n            this.log(\"开启 请求奖励列表锁\")\n            try {\n                await this.getPrizeList(cheerioApi);\n            } finally {\n                this.log(\"释放 请求奖励列表锁\")\n                await this.releaseLock(this.activityId, this.activityId)\n            }\n        }\n    }\n    let exitMsg = \"\"\n    if (this.super.actStartTime > Date.now()) {\n        exitMsg = `活动未开始`;\n    }\n    if (this.super.actEndTime < Date.now()) {\n        exitMsg = `活动已结束`;\n    }\n    await this.checkExitPrize()\n\n    if (exitMsg) {\n        throw new CustomError(exitMsg)\n    }\n    if (!this.isMember) {\n        await this.openCard()\n    }\n    if (!this.isMember) {\n        throw new CustomError(\"非会员退出\")\n    }\n    this.checkExitShop()\n    this.checkExitActName()\n    return cheerioApi;\n}",
      "async function login(data = {}) {\n    await this.checkExitPrize()\n    if (this.super.exit) {\n        throw new CustomError(\"逻辑终止\")\n    }\n    if (/(wxInviteRank|wxInviteActivity)/.test(this.activityUrl) && !this.isMaster()) {\n        await this.isOpenCard()\n        if (this.isMember) {\n            await this.runCachedForever()\n            throw new CustomError(\"已是会员\")\n        }\n        await this.isCanTOpenCard()\n        if (this.isNotOpenCard) {\n            await this.runCachedForever()\n            throw new CustomError(\"无法开卡\")\n        }\n    }\n    await this['_algo']()\n    await this.isvObfuscator();\n    await this['getSimpleActInfoVo']()\n    await this['getShopInfo']();\n    await this.getMyPing();\n    await this.accessLog();\n    this.checkExitShop()\n    this.checkExitActName()\n    return {}\n}",
      "async function login(data = {}) {\n    if (this.super.exit) {\n        throw new CustomError(\"逻辑终止\")\n    }\n    await this.isvObfuscator()\n    this.tickets.set(\"BD_USER_ID\", this.venderId);\n    await this.api(`wxCommonInfo/token?t=${Date.now()}`, ``)\n    // await this.getMyPing(\"customer/getMyCidPing\");\n    return {}\n    // this.tickets.set(\"AUTH_CUSER\", this.Pin);\n    // await this.accessLog();\n    // let init = await this.api(`/dingzhi/taskact/common/init`, `activityId=${this.activityId}&pin=${this.Pin}&dzActivityType=0`);\n    // return init.data\n}"
    ],
    "postHandle": [
      "async function postHandle(fn, _u, protocol, domain, _c, _b, param) {\n    if (!/isvjcloud/.test(domain)) {\n        return {_u, _b};\n    }\n    if (fn.startsWith(\"http\")) {\n\n    } else {\n        _u = `${protocol}://${domain}${(`/${this.urlPrefix}/${fn}`).replaceAll(/\\/\\/\\//gi, '/').replaceAll(/\\/\\//gi, '/')}`\n        _c.headers.Cookie = `IsvToken=${this.isvToken};${this.ticket}isBasicJson=true;`\n        _c.headers.Referer = this.referer || `${this.activityUrl}&sid=${this.sid}&un_area=${this.un_area}`\n    }\n    _c.headers.token = this.Token\n        // _c.headers.reserveEnvInfo = \"eyJ1c2VyQWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNi4wOyBOZXh1cyA1IEJ1aWxkL01SQTU4TikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyNC4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNiBFZGcvMTI0LjAuMC4wIiwidXJsIjoibHprai1pc3YuaXN2amNsb3VkLmNvbS9wcm9kL2NjL2ludGVyYWN0c2Fhcy9pbmRleCIsInVybFFTdHIiOiJhY3Rpdml0eVR5cGU9MTAwMjMmdGVtcGxhdGVJZD0yMDIxMDUxODE5MDkwMHJscWQwMTEmYWN0aXZpdHlJZD0xNzczNjUyNDgxODM0MDEyNjc0Jm5vZGVJZD0xMDEwMDEmcHJkPWNqd3giLCJsYW5ndWFnZSI6InpoLUNOIiwiYnJvd3NlciI6ImFwcGxld2Via2l0X2Nocm9tZSIsImJyb3dzZXJWZXJzaW9uIjo1MzcuMzYsIm9zIjoibGludXgiLCJvc1ZlcnNpb24iOiJOQSIsInNjcmVlblJlc29sdXRpb24iOiI4MzZ4NDAwIiwidGltZXpvbmVPZmZzZXQiOi04LCJzZXNzaW9uU3RvcmFnZSI6InRydWUiLCJsb2NhbFN0b3JhZ2UiOiJ0cnVlIiwiaW5kZXhlZERiIjoidHJ1ZSIsIm9wZW5EYXRhYmFzZSI6ImZhbHNlIiwiaGFyZHdhcmVDb25jdXJyZW5jeSI6NCwiZG9Ob3RUcmFjayI6IjEiLCJwbGF0Zm9ybSI6IldpbjMyIiwiY2FudmFzRnAiOiJhMTE5ZjRmMjE4Y2FlNDE4YjkwMTYyMjJlN2NhZTQ2NSIsIndlYmdsRnAiOiJhNmJmMTMxMmM2NzM0MTY1MTU3ODhjYTFmMzdlMTgwYSIsImZwIjoiMTQ2NjgxZDZhMjVmYzI2NzFkNzlmNzZjN2QwMWU1MGIiLCJyYW5kb21JZCI6Ijg2NGMxZjhjZWY3MzZlNGE0YmU4OGQ4ZTEzNzE4YjRkIn0=\"\n        // _c.headers.reserveJsVersion = \"1.0.0\"\n    if (this.super?.defenseUrls && this.super.defenseUrls?.length && this.super.defenseUrls?.includes(\n        fn.startsWith(\"/\") ? fn : `/${fn}`)) {\n        let body = {\n            nowTime: Date.now(),\n            actId: this.activityId\n        };\n        if (typeof param === \"object\") {\n            Object.assign(body, _b)\n            body.consumePoints = param.consumePoints || 0;\n        } else {\n            // 创建 URLSearchParams 对象并传入查询参数字符串\n            const params = new URLSearchParams(param);\n            // 将查询参数转换为对象格式\n            for (const [key, value] of params.entries()) {\n                body[key] = value;\n            }\n        }\n        const ecyText = this.v(body)\n        _b = {ecyText}\n        _c.headers[\"Content-Type\"] = \"application/json;charset=utf-8\"\n    }\n    return {_u, _b};\n}",
      "async function postHandle(fn, _u, protocol, domain, _c, _b, param) {\n    if (!/isvjcloud/.test(domain)) {\n        return {_u, _b};\n    }\n    if (fn.startsWith(\"http\")) {\n\n    } else {\n        _u = `${protocol}://${domain}${(`/${this.urlPrefix}/${fn}`).replaceAll(/\\/\\/\\//gi, '/').replaceAll(/\\/\\//gi, '/')}`\n        _c.headers.Cookie = `IsvToken=${this.isvToken};${this.ticket}isBasicJson=true;`\n        _c.headers.Referer = this.referer || `${this.activityUrl}&sid=${this.sid}&un_area=${this.un_area}`\n    }\n    return {_u, _b};\n}",
      "async function postHandle(fn, _u, protocol, domain, _c, _b, param) {\n    if (!/isvjcloud/.test(domain)) {\n        return {_u, _b};\n    }\n    if (fn.startsWith(\"http\")) {\n\n    } else {\n        _u = `${protocol}://${domain}${(`/${this.urlPrefix}/${fn}`).replaceAll(/\\/\\/\\//gi, '/').replaceAll(/\\/\\//gi, '/')}`\n        _c.headers.Cookie = `IsvToken=${this.isvToken};${this.ticket}isBasicJson=true;`\n        _c.headers.Referer = this.referer || `${this.activityUrl}&sid=${this.sid}&un_area=${this.un_area}`\n    }\n    if (this.super?.defenseUrls && this.super.defenseUrls?.length && this.super.defenseUrls?.includes(fn.startsWith(\"/\") ? fn : `/${fn}`)) {\n        let body = {\n            nowTime: Date.now(),\n            actId: this.activityId\n        };\n        if (typeof param === \"object\") {\n            Object.assign(body, _b)\n            body.consumePoints = param.consumePoints || 0;\n        } else {\n            // 创建 URLSearchParams 对象并传入查询参数字符串\n            const params = new URLSearchParams(param);\n            // 将查询参数转换为对象格式\n            for (const [key, value] of params.entries()) {\n                body[key] = value;\n            }\n        }\n        const ecyText = this.v(body)\n        _b = {ecyText}\n        _c.headers[\"Content-Type\"] = \"application/json;charset=utf-8\"\n    }\n    return {_u, _b};\n}",
      "async function postHandle(fn, _u, protocol, domain, _c, _b, param) {\n    if (!/isvjcloud/.test(domain)) {\n        return {_u, _b};\n    }\n    if (fn.startsWith(\"http\")) {\n\n    } else {\n        _u = `${protocol}://${domain}${(`/${this.urlPrefix}/${fn}`).replaceAll(/\\/\\/\\//gi, '/').replaceAll(/\\/\\//gi, '/')}`\n        _c.headers.Cookie = `IsvToken=${this.isvToken};${this.ticket}isBasicJson=true;`\n        _c.headers.Referer = this.referer || `${this.activityUrl}&sid=${this.sid}&un_area=${this.un_area}`\n    }\n    this.tickets.set(\"AUTH_CUSER\", this.Pin);\n    for (let key of Object.keys(this.tickets)) {\n        if (this.tickets.get(key)) {\n            headers[key.replace(\"_\", \"\").toLowerCase()] = this.tickets.get(key)\n        }\n    }\n    return {_u, _b};\n}"
    ],
    "rsaEncrypt": [
      "function rsaEncrypt(publicKey, opt, data) {\n    publicKey = `-----BEGIN PUBLIC KEY-----\\n${publicKey}\\n-----END PUBLIC KEY-----`;\n    let key = new NodeRSA(publicKey);\n    key.setOptions(opt);\n    return key.encrypt(data, 'base64');\n}"
    ],
    "saveAddress": [
      "async function saveAddress(addressId = this.addressId, prizeName = this.prizeName, prizeId = this.prizeId, addr = \"\") {\n    this.putMsg(`addressId=${addressId},prizeName=${prizeName},ptpin=${this.ptpin},prizeId=${prizeId}`)\n    if (this.wxAddressStop(prizeName)) {\n        return\n    }\n    if (this.super.currAddressPtpin && this.super.currAddressPtpin !== this.ptpin) {\n        this.super.addressIndex++;\n    }\n    this.super.currAddressPtpin = this.ptpin;\n    let addrInfo = addr || this.selectAddress(this.ptpin);\n    if (!addrInfo) {\n        this.putMsg(\"没有找到地址信息\")\n        return\n    }\n    this.log(`当前地址详情 ${JSON.stringify(addrInfo)}`);\n    this.putMsg(addrInfo.address)\n    let isSaveAddr = false;\n    try {\n        let saveData = await this.api('/api/my/prize/update', {\n            \"realName\": addrInfo.receiver,\n            \"mobile\": addrInfo.phone,\n            \"address\": addrInfo.address,\n            \"orderCode\": addressId,\n            \"province\": addrInfo.province,\n            \"city\": addrInfo.city,\n            \"county\": addrInfo.county\n        });\n        this.log(saveData);\n        if (saveData?.data !== \"2\") {\n            isSaveAddr = true\n        } else {\n            this.putMsg(`超一小时或其他报错，请手动进活动确认`)\n        }\n    } catch (e) {\n        this.log(e)\n    }\n    if (isSaveAddr) {\n        this.putMsg(`已填地址`)\n        await fs.appendFileSync(\"gifts.csv\", `${this.now()},${prizeName},${this.ptpin},${addrInfo.phone},${addrInfo.address},${this.super.name},${this.super.shopName},${this.activityUrl},${this.cookie}\\n`)\n    }\n    return isSaveAddr;\n}",
      "async function saveAddress(addressId = this.addressId, prizeName = this.prizeName, prizeId = this.prizeId, addr = \"\") {\n    this.putMsg(`addressId=${addressId},prizeName=${prizeName},ptpin=${this.ptpin},prizeId=${prizeId}`)\n    if (this.wxAddressStop(prizeName)) {\n        return\n    }\n    if (this.super.currAddressPtpin && this.super.currAddressPtpin !== this.ptpin) {\n        this.super.addressIndex++;\n    }\n    this.super.currAddressPtpin = this.ptpin;\n    let addrInfo = addr || this.selectAddress(this.ptpin);\n    if (!addrInfo) {\n        this.putMsg(\"没有找到地址信息\")\n        return\n    }\n    this.log(`当前地址详情 ${JSON.stringify(addrInfo)}`);\n    this.putMsg(addrInfo.address)\n    let isSaveAddr = false;\n    try {\n        let address = `${addrInfo.province.replace(\"市\", \"\").replace('省', '')} ${addrInfo.city.replace('市', '')} ${addrInfo.county}${addrInfo.address}`\n        let saveData = await this.api('/ql/front/postBuyerInfo', `receiverName=${encodeURIComponent(addrInfo.receiver)}&mobile=${addrInfo.phone}&address=${encodeURIComponent(address)}&log_id=${addressId}&user_id=${this.super.userId}`)\n        this.log(saveData);\n        if (saveData.succ) {\n\n            isSaveAddr = true\n        } else {\n            this.putMsg(saveData.msg)\n        }\n    } catch (e) {\n        this.log(e)\n    }\n    if (isSaveAddr) {\n        this.putMsg(`已填地址`)\n        await fs.appendFileSync(\"gifts.csv\", `${this.now()},${prizeName},${this.ptpin},${addrInfo.phone},${addrInfo.address},${this.super.name},${this.super.shopName},${this.activityUrl},${this.cookie}\\n`)\n    }\n    return isSaveAddr;\n}",
      "async function saveAddress(addressId = this.addressId, prizeName = this.prizeName, prizeId = this.prizeId, addr = \"\") {\n    this.putMsg(`addressId=${addressId},prizeName=${prizeName},ptpin=${this.ptpin},prizeId=${prizeId}`)\n    if (this.wxAddressStop(prizeName)) {\n        return\n    }\n    if (this.super.currAddressPtpin && this.super.currAddressPtpin !== this.ptpin) {\n        this.super.addressIndex++;\n    }\n    this.super.currAddressPtpin = this.ptpin;\n    let addrInfo = addr || this.selectAddress(this.ptpin);\n    if (!addrInfo) {\n        this.putMsg(\"没有找到地址信息\")\n        return\n    }\n    this.log(`当前地址详情 ${JSON.stringify(addrInfo)}`);\n    this.putMsg(addrInfo.address)\n    let isSaveAddr = false;\n    try {\n        let saveData = await this.api('wxAddress/save', `venderId=${this.super.venderId}&pin=${this.Pin}&activityId=${this.activityId}&actType=${this.activityType}&prizeName=${encodeURIComponent(prizeName)}&receiver=${encodeURIComponent(addrInfo.receiver)}&phone=${addrInfo.phone}&province=${encodeURIComponent(addrInfo.province)}&city=${encodeURIComponent(addrInfo.city)}&address=${encodeURIComponent(addrInfo.address)}&generateId=${addressId}&postalCode=${addrInfo.postalCode}&areaCode=${encodeURIComponent(addrInfo.areaCode)}&county=${encodeURIComponent(addrInfo.county)}`);\n        if(!saveData.result) {\n            this.putMsg(saveData.errorMessage)\n            if (saveData.errorMessage.includes(\"您必须在中奖一小时内填写中奖地址\")){\n                return;\n            }\n        }\n        if (saveData.result) {\n            isSaveAddr = true\n        } else {\n            this.putMsg(`venderId填地址失败`)\n            saveData = await this.api('wxAddress/save', `venderId=${this.super.shopId}&pin=${this.Pin}&activityId=${this.activityId}&actType=${this.activityType}&prizeName=${encodeURIComponent(prizeName)}&receiver=${encodeURIComponent(addrInfo.receiver)}&phone=${addrInfo.phone}&province=${encodeURIComponent(addrInfo.province)}&city=${encodeURIComponent(addrInfo.city)}&address=${encodeURIComponent(addrInfo.address)}&generateId=${addressId}&postalCode=${addrInfo.postalCode}&areaCode=${encodeURIComponent(addrInfo.areaCode)}&county=${encodeURIComponent(addrInfo.county)}`);\n            if (saveData.result) {\n                isSaveAddr = true\n            } else {\n                this.putMsg(`${saveData.errorMessage}`)\n            }\n        }\n    } catch (e) {\n        this.log(e)\n    }\n    if (isSaveAddr) {\n        this.putMsg(`已填地址`)\n        await fs.appendFileSync(\"gifts.csv\", `${this.now()},${prizeName},${this.ptpin},${addrInfo.phone},${addrInfo.address},${this.super.name},${this.super.shopName},${this.activityUrl},${this.cookie}\\n`)\n    }\n    return isSaveAddr;\n}"
    ],
    "taskToDo": [
      "async function taskToDo(taskList = []) {\n    if (!taskList || taskList.length === 0) {\n        return\n    }\n    if (taskList.filter(o => ![8, 15, 13].includes(o.taskType * 1)).length === 0) {\n        this.log(\"没有任务\")\n    }\n    for (let ele of taskList.filter(o => ![8, 13, 15].includes(o.taskType) && o.status === 0) || []) {\n        for (let ele of taskList.filter(o => o.status === 0) || []) {\n            try { /*\n                    关注店铺    1\n                    浏览店铺    2\n                    浏览商品    3\n                    浏览会场/直播    4\n                    关注商品    5\n                    预约商品    6\n                    加购任务    7\n                    购买商品    8\n                    分享商品    9\n                    分享店铺    10\n                    分享活动    12\n                    会员开卡    13\n                    每日签到    14\n                    邀请助力    15\n                    */\n                if ([1, 2, 4, 10, 12, 14].includes(ele.taskType)) {\n                    await this.api('/api/basic/task/toDo', {'skuId': '', 'taskId': ele.taskId})\n                } else if ([3, 5, 6, 7, 9].includes(ele.taskType)) {\n                    let skuIds = ele.skuInfoVO.filter(o => o.status === 0)\n                    if (ele.hasOwnProperty(\"activeLimit\")) {\n                        for (let i = 0; i < skuIds.length && (i < ele.activeLimit.limitNum * ele.finishNum || i < ele.finishNum || i < ele.maxNum); i++) {\n                            await this.api('/api/basic/task/toDo', {'skuId': skuIds[i].skuId, 'taskId': ele.taskId})\n                        }\n                    } else {\n                        for (let i = 0; i < skuIds.length && (i < ele.finishNum || i < ele.maxNum); i++) {\n                            await this.api('/api/basic/task/toDo', {'skuId': skuIds[i].skuId, 'taskId': ele.taskId})\n                        }\n                    }\n\n                }\n            } catch (e) {\n                this.log(e.message, JSON.stringify(ele))\n            }\n        }\n    }\n}"
    ],
    "v": [
      "function v(e) {\n    let b = [\"B6dB3QqGZP1lKNICTaiAeNJSHKNepO5GGgtL6FUceqSlpFZCdx2SZ5MPPbzrgy91HeR0dnJazcMrvMgPF7bhFrfsGaApJKk4JohEEhoJ4kKJpAaGsfrFhb7FPgMvrMczaJnd0ReH19ygrzbPPM5ZS2xdCZFplSqecUF6LtgGG5OpeNKHSJNeAiaTCINKl1PZGqQ3Bd6B\",\n        \"EUhzJoyKP7VydtpyBwNUGU2tqzI0QB0LIpQ10Fk3hX2ZcPoGRpACqmzcTQbKd98i3U7raFz2rMl2kys0ODgtAh22E3i57wmh38RbbR83hmw75i3E22hAtgDO0syk2lMr2zFar7U3i89dKbQTczmqCApRGoPcZ2Xh3kF01QpIL0BQ0Izqt2UGUNwByptdyV7PKyoJzhUE\",\n        \"xexcHoyVwOs5TYTQVvU0iXn56ryKVdWedLTpq3KEKmbUHfwzuZjIpZOPVXMEappFhjdqwtp1bBrWaRBCfPFwCq2W8SsyvwqZ6sIGGIs6ZqwvysS8W2qCwFPfCBRaWrBb1ptwqdjhFppaEMXVPOZpIjZuzwfHUbmKEK3qpTLdeWdVKyr65nXi0UvVQTYT5sOwVyoHcxex\",\n        \"2Llnegc5i4flqd4HZPFK210yh61boBxRSdnNVMeudKimx92Qi4aPuHP12HmEImbWrXjLgBGqy1bSnKvLhqMqhknyuse4nFoeLTkJJkTLeoFn4esuynkhqMqhLvKnSb1yqGBgLjXrWbmIEmH21PHuPa4iQ29xmiKdueMVNndSRxBob16hy012KFPZH4dqlf4i5cgenlL2\",\n        \"dZzoMZF6xtt3voTFDbPzEZ7GeM8t7uY05d4K4xfhtdxELh96dDRB4oRYA2smET5dy1dafGkXOz2V7tNOVi0vSqfuhI99IKprVK6QQ6KVrpKI99IhufqSv0iVONt7V2zOXkGfad1yd5TEms2AYRo4BRDd69hLExdthfx4K4d50Yu7t8MeG7ZEzPbDFTov3ttx6FZMozZd\",\n        \"SNYr3bWMtQulWZO2FEwuhSFp3EXPR1TujPRJwUFlxBh9Pvf2MeTEpR7a3dU6e9rNUMyBh2osDdK4Vdm4gZ0XcRCoHZPi2jiXT2dCCd2TXij2iPZHoCRcX0Zg4mdV4KdDso2hByMUNr9e6Ud3a7RpETeM2fvP9hBxlFUwJRPjuT1RPXE3pFShuwEF2OZWluQtMWb3rYNS\",\n        \"4viQ2FrYHcrH44gqvPLo6KtiFu56AW1eXbDBZrBepzdLKE33Ey4TwFERnkVLnbHAXbKqAi0HFP9Eu7yg8WNlI7q2dvXGGiPaMbrBBrbMaPiGGXvd2q7IlNW8gy7uE9PFH0iAqKbXAHbnLVknREFwT4yE33EKLdzpeBrZBDbXe1WA65uFitK6oLPvqg44HrcHYrF2Qiv4\",\n        \"0VIoSHBNVAW8De7NquFyEUm0o9xNnQJGn2OR1yOK9djWALhyP3a1XoQEwTnXuzypRuwsaLPUlertksOY6LYmnbQmPgdDQRXXKdKooKdKXXRQDdgPmQbnmYL6YOsktrelUPLaswuRpyzuXnTwEQoX1a3PyhLAWjd9KOy1RO2nGJQnNx9o0mUEyFuqN7eD8WAVNBHSoIV0\",\n        \"fdJPBiTra9E0qg2HJrobeEC2SkOfSzbw6nG5J5ACx42GQDBsCyGfxNlHHYhl7EmkdvYaKAXUVXSKcTT1KhyYaj9Q4YtyhnOA7cLrrLc7AOnhytY4Q9jaYyhK1TTcKSXVUXAKaYvdkmE7lhYHHlNxfGyCsBDQG24xCA5J5Gn6wbzSfOkS2CEeborJH2gq0E9arTiBPJdf\",\n        \"kLOA93PyUOX3QdlLuZ9JgNq1peyIITAQSnKzuLBZ2NthOSseAJMGCecvSLVKAww61Y31hJ4l7kAOcjLmtqQNJlNyJb5yu9d9vqWUUWqv9d9uy5bJyNlJNQqtmLjcOAk7l4Jh13Y16wwAKVLSvceCGMJAesSOhtN2ZBLuzKnSQATIIyep1qNgJ9ZuLldQ3XOUyP39AOLk\"];\n\n    var t = e.nowTime + parseInt(this.tickets.get(\"te\"));\n    let pToken = this.tickets.get(\"pToken\");\n    e.nowTime = t;\n    for (var i = pToken + t, o = i.substring(0, i.length - 5), a = \"\", n = 0; n < o.length; n++) {\n        var s = o.charCodeAt(n);\n        a += b[s % 10][n]\n    }\n    for (var c = a.length, l = Math.floor(c / 24), d = \"\", g = 0; g < 24; g++) {\n        var f = (g + 1) * l;\n        23 === g && (f = c);\n        for (var p = a.substring(g * l, f), u = [], h = 0; h < p.length; h++) {\n            u.push(p.charCodeAt(h));\n        }\n        var v = u.reduce(function (e, t) {\n            return e + t\n        }, 0), y = Math.floor(v / u.length);\n        d += String.fromCharCode(y)\n    }\n    var k = function (e) {\n        e = e.split(\"\").reverse().join(\"\");\n        for (var t = new Uint8Array(12), i = (new TextEncoder).encode(e), o = 0; o < i.length; o += 2) {\n            var a = i[o] << 5 | 255 & i[o + 1];\n            a %= 63, t[o >> 1] = a\n        }\n        for (var n = \"\", r = 0; r < t.length; r++) {\n            n += (t[r] + 256).toString(2).slice(1);\n        }\n        for (var s = \"\", m = \"\", c = 0; c < 16; c++) {\n            if (0 !== c) {\n                for (var l = 6 * c, d = n.substring(l, l + 6), g = parseInt(d, 2), f = m.split(\"\"), p = 0; p < f.length; p++) {\n                    \"1\" === f[p] && (g = 63 & (g >> 6 - p | g << p));\n                }\n                m = (63 & g).toString(2).padStart(6, \"0\")\n            } else {\n                m = n.substring(0, 6);\n            }\n            s += m\n        }\n        for (var u = 0; u < 12; u++) {\n            var b = 8 * u;\n            t[u] = parseInt(s.substring(b, b + 8), 2)\n        }\n        return base64.encode(String.fromCharCode.apply(null, t))\n    }(a = d), w = CryptoJS.enc.Utf8.parse(k), B = CryptoJS.enc.Utf8.parse(\"\");\n    return CryptoJS.AES.encrypt(JSON.stringify(e), w, {\n        iv: B,\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n    }).toString()\n}"
    ],
    "getSimpleActInfoVo": [
      "async function getSimpleActInfoVo(fn = 'customer/getSimpleActInfoVo', body = \"\") {\n    if (this.super.venderId && this.super.shopId && this.super.activityType) {\n        await this.initPinToken()\n        return\n    }\n    let actInfo = await this.api(fn, body || `activityId=${this.activityId}`);\n    if (!actInfo.result || !actInfo.data) {\n        //尝试解决已结束活动\n        await this.api(this.activityUrl)\n        this.putMsg('手动确认');\n        this.super.handConfirm++;\n        if (this.super.handConfirm > 3) {\n            this.super.exit = true;\n        }\n        throw new CustomError(\"手动确认\")\n    }\n    this.super.venderId = actInfo.data.venderId || this.venderId;\n    this.super.shopId = actInfo.data.shopId || this.shopId;\n    this.super.activityType = actInfo.data.activityType || this.activityType;\n    await this.initPinToken()\n}",
      "async function getSimpleActInfoVo(fn = 'customer/getSimpleActInfoVo', body = \"\") {\n    let actInfo = await this.api(fn, body || `activityId=${this.activityId}`);\n    if (!actInfo.result || !actInfo.data) {\n        //尝试解决已结束活动\n        await this.api(this.activityUrl)\n        this.putMsg('手动确认');\n        this.super.handConfirm++;\n        if (this.super.handConfirm > 3) {\n            this.super.exit = true;\n        }\n        throw new CustomError(\"手动确认\")\n    }\n    this.super.venderId = actInfo.data.venderId || this.venderId;\n    this.super.shopId = actInfo.data.shopId || this.shopId;\n    this.super.activityType = actInfo.data.activityType || this.activityType;\n}"
    ]
  }